apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: cleanup
spec:
  workspaces:
    - name: output
  steps:
    - name: cleanup
      image: alpine:3
      env:
        - name: WORKSPACE_OUTPUT_PATH
          value: $(workspaces.output.path)
      workingDir: $(workspaces.output.path)
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      script: |
        #!/usr/bin/env sh
        set -eu
        echo "Removing all files from ${WORKSPACE_OUTPUT_PATH} ..."
        # Delete any existing contents of the directory if it exists.
        #
        # We don't just "rm -rf ${WORKSPACE_OUTPUT_PATH}" because ${WORKSPACE_OUTPUT_PATH} might be "/"
        # or the root of a mounted volume.
        if [ -d "${WORKSPACE_OUTPUT_PATH}" ] ; then
          # Delete non-hidden files and directories
          rm -rf "${WORKSPACE_OUTPUT_PATH:?}"/*
          # Delete files and directories starting with . but excluding ..
          rm -rf "${WORKSPACE_OUTPUT_PATH}"/.[!.]*
          # Delete files and directories starting with .. plus any other character
          rm -rf "${WORKSPACE_OUTPUT_PATH}"/..?*
        fi
---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: git-clone
spec:
  params:
    - name: url
      type: string
  workspaces:
    - name: output
  steps:
    - name: git-clone
      image: alpine/git
      script: |
        #!/bin/sh
        git clone $(params.url) $(workspaces.output.path)

---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: lint
spec:
  workspaces:
    - name: output
  steps:
    - name: lint
      image: python:3.9-slim
      workingDir: $(workspaces.output.path)
      script: |
        #!/bin/bash
        pip install flake8
        flake8 service --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 service --count --max-complexity=10 --max-line-length=127 --statistics

---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: nose-tests
spec:
  workspaces:
    - name: output
  params:
    - name: args
      description: Arguments to pass to nose
      type: string
      default: "-v --with-coverage --cover-package=app"
  steps:
    - name: nose-tests
      image: python:3.9-slim
      workingDir: $(workspaces.output.path)
      script: |
        #!/bin/bash
        set -e
        python -m pip install --upgrade pip wheel
        pip install -r requirements.txt
        pip install nose coverage
        nosetests $(params.args)

---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: buildah
spec:
  params:
    - name: IMAGE
      type: string
  workspaces:
    - name: output
  steps:
    - name: step-01-buildah-and-push
      image: gcr.io/kaniko-project/executor:latest
      workingDir: $(workspaces.output.path)
      env:
        - name: DOCKER_CONFIG
          value: /tekton/home/.docker/
      script: |
        #!/busybox/sh
        /kaniko/executor --dockerfile=Dockerfile --context=$(workspaces.output.path) --destination=$(params.IMAGE)

---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: oc-deploy
spec:
  params:
    - name: app-name
      type: string
    - name: build-image
      type: string
  steps:
    - name: step-01-deploy-app
      image: quay.io/openshift/origin-cli:latest
      script: |
        #!/bin/sh
        oc delete deployment "$(params.app-name)" --ignore-not-found
        oc create deployment "$(params.app-name)" --image="$(params.build-image)"
